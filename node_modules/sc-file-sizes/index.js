var gutil   = require('gulp-util'),
  through   = require('through2'),
  gzipSize  = require('gzip-size'),
  yaml      = require('yamljs'),
  fs        = require('fs');

module.exports = function (options) {
  "use strict";

  options          = options || {};
  options.path     = (options.path  !== undefined) ? options.path  : 'config/file_sizes.yml';

  var fileCount = 0,
    totalSize = 0,
    gzippedSize;

  var fileMap = {
        components: {},
        elements: {},
        features: {},
        base: 0,
        expandable: 0
    };

  return through.obj(function (file, enc, callback) {
    if (file.isNull()) {
      callback(null, file);
      return;
    }

    if (file.isStream()) {
      callback(new gutil.PluginError('gulp-size', 'Streaming not supported'));
      return;
    }

    totalSize += file.contents.length;
    fileCount ++;

    gzippedSize = gzipSize.sync(file.contents);

    // Adding minified size to file map
    var fileType     = file.relative.match(/\.js/) ? 'js' : 'css',
      fullPath       = file.relative.replace(/\.js/g, '').replace(/\.css/g, ''),
      parsedFilePath = fullPath.split('/'),
      filename       = parsedFilePath[parsedFilePath.length - 1];

      console.log('parsedFilePath: ', parsedFilePath);

    if (fileType == 'js') {
      // skipping all flash files
      if(filename.match(/flash/i) || parsedFilePath[0].match(/^expandable|flash|iframe_buster$/)) {
        console.log('excluding flash file: ', fullPath);
      }
      else if (parsedFilePath[0] === 'channels') {
        if (fullPath.match(/provider/i)) {
          fileMap['features']['feature'] = (fileMap['features']['feature'] || 0) + gzippedSize;
        }
        else if (filename.match('feature')) {
          // only including modern feature going forward ('old' feature channel is deprecated)
          if (filename === 'modern_feature') {
            fileMap['features']['feature'] = (fileMap['features']['feature'] || 0) + gzippedSize;
          }
        }
        else if (filename.match('panel')) {
          // panel channel for flash only - exclude this file
          console.log('excluding flash file: ', fullPath);
        }
        else {
          fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
        }
      }
      else if (parsedFilePath[0].match(/^common|utils$/)) {
        if (filename === 'animation') {
          fileMap['transitions'] = fileMap['transitions'] || {};
          fileMap['transitions']['base'] = gzippedSize
        }
        else {
          fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
        }
      }
      else if (parsedFilePath[0] === 'tags') {
        // only including studio iframe tag to simplify logic - studioIframe / studioScript are very close in size and rarely change
        if (filename === 'studioIframe' || filename.match(/^creative|studio|impression$/)) {
          fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
        }
      }
      else if (parsedFilePath.length === 1) {
        // vendor / base files
        if (filename === 'video' || filename === 'screenfull' || filename === 'canvid') {
          fileMap['components']['video'] = (fileMap['components']['video'] || 0) + gzippedSize;
        }
        else if (filename === 'spongecarousel') {
          fileMap['components']['mediaCarousel'] = (fileMap['components']['mediaCarousel'] || 0) + gzippedSize;
        }
        else if (filename === 'zepto' || filename.match(/promise/i)) {
          fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
        }
        else if (filename === 'mustache') {
          fileMap['elements']['customElement'] = (fileMap['elements']['customElement'] || 0) + gzippedSize;
        }
        else if (filename === 'panelContainer') {
          fileMap['expandable'] = (fileMap['expandable'] || 0) + gzippedSize;
        }
        else if (filename === 'jquery.dotdotdot') {
          fileMap['elements']['text'] = (fileMap['elements']['text'] || 0) + gzippedSize;
        }
        else {
          fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
        }
      }
      else if (parsedFilePath.length === 2 && parsedFilePath[0] === 'html') {
        // base files in ads/html directory
        if (parsedFilePath[1] === 'mediaCarouselNavigation' || parsedFilePath[1] === 'slide') {
          fileMap['components']['mediaCarousel'] = (fileMap['components']['mediaCarousel'] || 0) + gzippedSize;
        } else {
          fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
        }
      }
      else if (fullPath.match(/components/)) {
        if (filename.match(/video/)) {
          fileMap['components']['video'] = (fileMap['components']['video'] || 0) + gzippedSize;
        }
        else {
          fileMap['components'][filename] = (fileMap['components'][filename] || 0) + gzippedSize;
        }
      }
      else if (fullPath.match(/features/)) {
        fileMap['features'][filename] = (fileMap['features'][filename] || 0) + gzippedSize;
      }
      else if (fullPath.match(/elements/)) {
        if (filename === 'thumbnail') {
          fileMap['components']['mediaCarousel'] = (fileMap['components']['mediaCarousel'] || 0) + gzippedSize;
        }
        else {
          fileMap['elements'][filename] = (fileMap['elements'][filename] || 0) + gzippedSize;
        }
      }
    }
    else if (fileType == 'css') {
      if (parsedFilePath[0] === 'platform') {
        fileMap['base'] = (fileMap['base'] || 0) + gzippedSize;
      }
      else if (parsedFilePath[0] === 'transitions') {
        fileMap['transitions'] = fileMap['transitions'] || {};
        fileMap['transitions'][filename] = gzippedSize;
      }
      else if (fullPath.match('video')) {
        fileMap['components']['video'] = (fileMap['components']['video'] || 0) + gzippedSize;
      }
      else if (fullPath.match('components')) {
        fileMap['components'][filename] = (fileMap['components'][filename] || 0) + gzippedSize;
      }
    }

    callback(null, file);

  }, function (callback) {

    if (fileCount > 0) {
      var yamlString = yaml.stringify(fileMap);
      fs.writeFile(options.path, yamlString, function(err) {
        if (err) {
          console.log('error writing to file: ', err);
        }
        else {
          console.log('file written to: ', options.path);
        }
      })
    }

    callback();
  });
};
